<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Neumorphism Chatroom</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="chat-container">
        <div class="chat-box">
            <div class="messages" id="messages"></div>
            <div class="input-container">
                <input type="text" id="messageInput" placeholder="Type a message...">
                <button onclick="sendMessage()">Send</button>
            </div>
        </div>
    </div>
    <script src="script.js"></script>
</body>
</html>
body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #e0e5ec;
    margin: 0;
    font-family: Arial, sans-serif;
}

.chat-container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
    width: 100%;
}

.chat-box {
    width: 400px;
    height: 600px;
    background: #e0e5ec;
    border-radius: 20px;
    box-shadow: 20px 20px 60px #babecc, -20px -20px 60px #ffffff;
    display: flex;
    flex-direction: column;
}

.messages {
    flex: 1;
    padding: 20px;
    overflow-y: auto;
    border-bottom: 1px solid #ccc;
}

.input-container {
    display: flex;
    padding: 20px;
}

input {
    flex: 1;
    padding: 10px;
    border: none;
    border-radius: 20px;
    box-shadow: inset 10px 10px 20px #babecc, inset -10px -10px 20px #ffffff;
    background: #e0e5ec;
    outline: none;
}

button {
    margin-left: 10px;
    padding: 10px 20px;
    border: none;
    border-radius: 20px;
    background: #e0e5ec;
    box-shadow: 10px 10px 20px #babecc, -10px -10px 20px #ffffff;
    cursor: pointer;
}

button:hover {
    box-shadow: inset 10px 10px 20px #babecc, inset -10px -10px 20px #ffffff;
}
function sendMessage() {
    const messageInput = document.getElementById('messageInput');
    const messageText = messageInput.value;
    if (messageText.trim() !== '') {
        const messageElement = document.createElement('div');
        messageElement.className = 'message';
        messageElement.textContent = messageText;
        document.getElementById('messages').appendChild(messageElement);
        messageInput.value = '';
    }
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Neumorphism Chatroom</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="login-container" id="loginContainer">
        <h2>Login</h2>
        <input type="text" id="username" placeholder="Username">
        <input type="password" id="password" placeholder="Password">
        <button onclick="login()">Login</button>
    </div>
    <div class="chat-container" id="chatContainer" style="display: none;">
        <div class="chat-box">
            <div class="messages" id="messages"></div>
            <div class="input-container">
                <input type="text" id="messageInput" placeholder="Type a message...">
                <button onclick="sendMessage()">Send</button>
            </div>
        </div>
        <button onclick="logout()">Logout</button>
    </div>
    <script src="script.js"></script>
</body>
</html>
body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #e0e5ec;
    margin: 0;
    font-family: Arial, sans-serif;
}

.login-container, .chat-container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background: #e0e5ec;
    border-radius: 20px;
    box-shadow: 20px 20px 60px #babecc, -20px -20px 60px #ffffff;
    padding: 20px;
}

.login-container {
    width: 300px;
    height: 300px;
}

input {
    width: 100%;
    margin-bottom: 20px;
    padding: 10px;
    border: none;
    border-radius: 20px;
    box-shadow: inset 10px 10px 20px #babecc, inset -10px -10px 20px #ffffff;
    background: #e0e5ec;
    outline: none;
}

button {
    padding: 10px 20px;
    border: none;
    border-radius: 20px;
    background: #e0e5ec;
    box-shadow: 10px 10px 20px #babecc, -10px -10px 20px #ffffff;
    cursor: pointer;
}

button:hover {
    box-shadow: inset 10px 10px 20px #babecc, inset -10px -10px 20px #ffffff;
}
// Dummy user data for demonstration
const users = {
    user1: '5f4dcc3b5aa765d61d8327deb882cf99' // password is 'password' hashed using MD5
};

function hashPassword(password) {
    return CryptoJS.MD5(password).toString();
}

function login() {
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;
    const hashedPassword = hashPassword(password);
    
    if (users[username] && users[username] === hashedPassword) {
        document.getElementById('loginContainer').style.display = 'none';
        document.getElementById('chatContainer').style.display = 'flex';
    } else {
        alert('Invalid username or password');
    }
}

function logout() {
    document.getElementById('chatContainer').style.display = 'none';
    document.getElementById('loginContainer').style.display = 'flex';
}

function sendMessage() {
    const messageInput = document.getElementById('messageInput');
    const messageText = messageInput.value;
    if (messageText.trim() !== '') {
        const messageElement = document.createElement('div');
        messageElement.className = 'message';
        messageElement.textContent = messageText;
        document.getElementById('messages').appendChild(messageElement);
        messageInput.value = '';
    }
}
<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/crypto-js.js"></script>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Neumorphism Chatroom</title>
    <link rel="stylesheet" href="style.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/crypto-js.js"></script>
</head>
<body>
    <div class="login-container" id="loginContainer">
        <h2>Login</h2>
        <input type="text" id="username" placeholder="Username">
        <input type="password" id="password" placeholder="Password">
        <button onclick="login()">Login</button>
    </div>
    <div class="chat-container" id="chatContainer" style="display: none;">
        <div class="chat-box">
            <div class="messages" id="messages"></div>
            <div class="input-container">
                <input type="text" id="messageInput" placeholder="Type a message...">
                <button onclick="sendMessage()">Send</button>
            </div>
        </div>
        <button onclick="logout()">Logout</button>
        <button onclick="startVoiceCommand()">Start Voice Command</button>
    </div>
    <script src="script.js"></script>
</body>
</html>
/* Same as previously provided CSS */
body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #e0e5ec;
    margin: 0;
    font-family: Arial, sans-serif;
}

.login-container, .chat-container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background: #e0e5ec;
    border-radius: 20px;
    box-shadow: 20px 20px 60px #babecc, -20px -20px 60px #ffffff;
    padding: 20px;
}

.login-container {
    width: 300px;
    height: 300px;
}

input {
    width: 100%;
    margin-bottom: 20px;
    padding: 10px;
    border: none;
    border-radius: 20px;
    box-shadow: inset 10px 10px 20px #babecc, inset -10px -10px 20px #ffffff;
    background: #e0e5ec;
    outline: none;
}

button {
    padding: 10px 20px;
    border: none;
    border-radius: 20px;
    background: #e0e5ec;
    box-shadow: 10px 10px 20px #babecc, -10px -10px 20px #ffffff;
    cursor: pointer;
}

button:hover {
    box-shadow: inset 10px 10px 20px #babecc, inset -10px -10px 20px #ffffff;
}
// Dummy user data for demonstration
const users = {
    user1: '5f4dcc3b5aa765d61d8327deb882cf99' // password is 'password' hashed using MD5
};

function hashPassword(password) {
    return CryptoJS.MD5(password).toString();
}

function login() {
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;
    const hashedPassword = hashPassword(password);
    
    if (users[username] && users[username] === hashedPassword) {
        document.getElementById('loginContainer').style.display = 'none';
        document.getElementById('chatContainer').style.display = 'flex';
    } else {
        alert('Invalid username or password');
    }
}

function logout() {
    document.getElementById('chatContainer').style.display = 'none';
    document.getElementById('loginContainer').style.display = 'flex';
}

function sendMessage() {
    const messageInput = document.getElementById('messageInput');
    const messageText = messageInput.value;
    if (messageText.trim() !== '') {
        const messageElement = document.createElement('div');
        messageElement.className = 'message';
        messageElement.textContent = messageText;
        document.getElementById('messages').appendChild(messageElement);
        messageInput.value = '';
    }
}

// Voice Command Feature
function startVoiceCommand() {
    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
    recognition.lang = 'en-US';
    recognition.interimResults = false;
    recognition.maxAlternatives = 1;

    recognition.onresult = (event) => {
        const command = event.results[0][0].transcript.toLowerCase();
        processVoiceCommand(command);
    };

    recognition.onspeechend = () => {
        recognition.stop();
    };

    recognition.onerror = (event) => {
        console.error('Error occurred in recognition: ', event.error);
    };

    recognition.start();
}

function processVoiceCommand(command) {
    if (command.includes('mute')) {
        const username = command.split('mute ')[1];
        muteUser(username);
    } else if (command.includes('kick')) {
        const username = command.split('kick ')[1];
        kickUser(username);
    } else if (command.includes('duration')) {
        const duration = parseInt(command.split('duration ')[1]);
        setDuration(duration);
    }
}

function muteUser(username) {
    console.log(`Muting user: ${username}`);
    // Add logic to mute user
}

function kickUser(username) {
    console.log(`Kicking user: ${username}`);
    // Add logic to kick user
}

function setDuration(duration) {
    console.log(`Setting duration: ${duration} minutes`);
    // Add logic to set duration
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Neumorphism Chatroom</title>
    <link rel="stylesheet" href="style.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/crypto-js.js"></script>
</head>
<body>
    <div class="login-container" id="loginContainer">
        <h2>Login</h2>
        <input type="text" id="username" placeholder="Username">
        <input type="password" id="password" placeholder="Password">
        <button onclick="login()">Login</button>
    </div>
    <div class="chat-container" id="chatContainer" style="display: none;">
        <div class="chat-box">
            <div class="messages" id="messages"></div>
            <div class="input-container">
                <input type="text" id="messageInput" placeholder="Type a message...">
                <button onclick="sendMessage()">Send</button>
            </div>
        </div>
        <button onclick="logout()">Logout</button>
        <button onclick="startVoiceCommand()">Start Voice Command</button>
    </div>
    <script src="script.js"></script>
</body>
</html>
/* Same as previously provided CSS */
body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #e0e5ec;
    margin: 0;
    font-family: Arial, sans-serif;
}

.login-container, .chat-container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background: #e0e5ec;
    border-radius: 20px;
    box-shadow: 20px 20px 60px #babecc, -20px -20px 60px #ffffff;
    padding: 20px;
}

.login-container {
    width: 300px;
    height: 300px;
}

input {
    width: 100%;
    margin-bottom: 20px;
    padding: 10px;
    border: none;
    border-radius: 20px;
    box-shadow: inset 10px 10px 20px #babecc, inset -10px -10px 20px #ffffff;
    background: #e0e5ec;
    outline: none;
}

button {
    padding: 10px 20px;
    border: none;
    border-radius: 20px;
    background: #e0e5ec;
    box-shadow: 10px 10px 20px #babecc, -10px -10px 20px #ffffff;
    cursor: pointer;
}

button:hover {
    box-shadow: inset 10px 10px 20px #babecc, inset -10px -10px 20px #ffffff;
}
// Dummy user data for demonstration
const users = {
    user1: '5f4dcc3b5aa765d61d8327deb882cf99' // password is 'password' hashed using MD5
};

const bannedIPs = [];

function hashPassword(password) {
    return CryptoJS.MD5(password).toString();
}

function login() {
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;
    const hashedPassword = hashPassword(password);
    
    if (users[username] && users[username] === hashedPassword) {
        document.getElementById('loginContainer').style.display = 'none';
        document.getElementById('chatContainer').style.display = 'flex';
    } else {
        alert('Invalid username or password');
    }
}

function logout() {
    document.getElementById('chatContainer').style.display = 'none';
    document.getElementById('loginContainer').style.display = 'flex';
}

function sendMessage() {
    const messageInput = document.getElementById('messageInput');
    const messageText = messageInput.value;
    if (messageText.trim() !== '') {
        const messageElement = document.createElement('div');
        messageElement.className = 'message';
        messageElement.textContent = messageText;
        document.getElementById('messages').appendChild(messageElement);
        messageInput.value = '';
    }
}

// Voice Command Feature
function startVoiceCommand() {
    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
    recognition.lang = 'en-US';
    recognition.interimResults = false;
    recognition.maxAlternatives = 1;

    recognition.onresult = (event) => {
        const command = event.results[0][0].transcript.toLowerCase();
        processVoiceCommand(command);
    };

    recognition.onspeechend = () => {
        recognition.stop();
    };

    recognition.onerror = (event) => {
        console.error('Error occurred in recognition: ', event.error);
    };

    recognition.start();
}

function processVoiceCommand(command) {
    if (command.includes('ban')) {
        const ipAddress = command.split('ban ')[1];
        banUserByIP(ipAddress);
    }
}

function banUserByIP(ipAddress) {
    if (!bannedIPs.includes(ipAddress)) {
        bannedIPs.push(ipAddress);
        console.log(`Banned IP address: ${ipAddress}`);
        // Add logic to disconnect the user and prevent rejoining
    } else {
        console.log(`IP address ${ipAddress} is already banned.`);
    }
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Neumorphism Chatroom</title>
    <link rel="stylesheet" href="style.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/crypto-js.js"></script>
</head>
<body>
    <div class="login-container" id="loginContainer">
        <h2>Login</h2>
        <img src="path/to/admin-profile.jpg" alt="Admin Profile" class="profile-pic">
        <input type="text" id="username" placeholder="Username">
        <input type="password" id="password" placeholder="Password">
        <button onclick="login()">Login</button>
    </div>
    <div class="chat-container" id="chatContainer" style="display: none;">
        <div class="chat-box">
            <div class="messages" id="messages"></div>
            <div class="input-container">
                <input type="text" id="messageInput" placeholder="Type a message...">
                <button onclick="sendMessage()">Send</button>
            </div>
        </div>
        <img src="path/to/user-profile.jpg" alt="User Profile" class="profile-pic">
        <button onclick="logout()">Logout</button>
        <button onclick="startVoiceCommand()">Start Voice Command</button>
    </div>
    <script src="script.js"></script>
</body>
</html>
body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #e0e5ec;
    margin: 0;
    font-family: Arial, sans-serif;
}

.login-container, .chat-container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background: #e0e5ec;
    border-radius: 20px;
    box-shadow: 20px 20px 60px #babecc, -20px -20px 60px #ffffff;
    padding: 20px;
}

.login-container {
    width: 300px;
    height: 300px;
}

input {
    width: 100%;
    margin-bottom: 20px;
    padding: 10px;
    border: none;
    border-radius: 20px;
    box-shadow: inset 10px 10px 20px #babecc, inset -10px -10px 20px #ffffff;
    background: #e0e5ec;
    outline: none;
}

button {
    padding: 10px 20px;
    border: none;
    border-radius: 20px;
    background: #e0e5ec;
    box-shadow: 10px 10px 20px #babecc, -10px -10px 20px #ffffff;
    cursor: pointer;
}

button:hover {
    box-shadow: inset 10px 10px 20px #babecc, inset -10px -10px 20px #ffffff;
}

.profile-pic {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    margin-bottom: 20px;
    box-shadow: 10px 10px 20px #babecc, -10px -10px 20px #ffffff;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Neumorphism Chatroom</title>
    <link rel="stylesheet" href="style.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/crypto-js.js"></script>
</head>
<body>
    <div class="login-container" id="loginContainer">
        <h2>Login</h2>
        <img src="path/to/admin-profile.jpg" alt="Admin Profile" class="profile-pic admin">
        <input type="text" id="username" placeholder="Username">
        <input type="password" id="password" placeholder="Password">
        <button onclick="login()">Login</button>
    </div>
    <div class="chat-container" id="chatContainer" style="display: none;">
        <div class="chat-box">
            <div class="messages" id="messages"></div>
            <div class="input-container">
                <input type="text" id="messageInput" placeholder="Type a message...">
                <button onclick="sendMessage()">Send</button>
            </div>
        </div>
        <img src="path/to/user-profile.jpg" alt="User Profile" class="profile-pic user">
        <span class="admin-username">Admin Username</span>
        <button onclick="logout()">Logout</button>
        <button onclick="startVoiceCommand()">Start Voice Command</button>
    </div>
    <script src="script.js"></script>
</body>
</html>
body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #e0e5ec;
    margin: 0;
    font-family: Arial, sans-serif;
}

.login-container, .chat-container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background: #e0e5ec;
    border-radius: 20px;
    box-shadow: 20px 20px 60px #babecc, -20px -20px 60px #ffffff;
    padding: 20px;
}

.login-container {
    width: 300px;
    height: 300px;
}

input {
    width: 100%;
    margin-bottom: 20px;
    padding: 10px;
    border: none;
    border-radius: 20px;
    box-shadow: inset 10px 10px 20px #babecc, inset -10px -10px 20px #ffffff;
    background: #e0e5ec;
    outline: none;
}

button {
    padding: 10px 20px;
    border: none;
    border-radius: 20px;
    background: #e0e5ec;
    box-shadow: 10px 10px 20px #babecc, -10px -10px 20px #ffffff;
    cursor: pointer;
}

button:hover {
    box-shadow: inset 10px 10px 20px #babecc, inset -10px -10px 20px #ffffff;
}

.profile-pic {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    margin-bottom: 20px;
    box-shadow: 10px 10px 20px #babecc, -10px -10px 20px #ffffff;
}

.admin {
    animation: pulse 2s infinite;
}

@keyframes pulse {
    0% {
        transform: scale(1);
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    }
    50% {
        transform: scale(1.1);
        box-shadow: 0 0 30px rgba(0, 0, 0, 0.2);
    }
    100% {
        transform: scale(1);
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    }
}

.admin-username {
    font-size: 1.5em;
    font-weight: bold;
    animation: colorChange 3s infinite;
}

@keyframes colorChange {
    0%, 100% {
        color: #333;
    }
    50% {
        color: #ff4500;
    }
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Audio Wave Visualization</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="visualization-container">
        <canvas id="audioCanvas"></canvas>
        <div class="controls">
            <button id="playButton">Play</button>
            <button id="pauseButton" style="display: none;">Pause</button>
        </div>
    </div>
    <audio id="audio" src="path/to/your/audio/file.mp3"></audio>
    <script src="script.js"></script>
</body>
</html>
body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #e0e5ec;
    margin: 0;
    font-family: Arial, sans-serif;
}

.visualization-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    background: #e0e5ec;
    border-radius: 20px;
    box-shadow: 20px 20px 60px #babecc, -20px -20px 60px #ffffff;
    padding: 20px;
}

canvas {
    border-radius: 20px;
    background: #f0f0f3;
    box-shadow: inset 10px 10px 20px #babecc, inset -10px -10px 20px #ffffff;
}

.controls {
    margin-top: 20px;
}

button {
    padding: 10px 20px;
    border: none;
    border-radius: 20px;
    background: #e0e5ec;
    box-shadow: 10px 10px 20px #babecc, -10px -10px 20px #ffffff;
    cursor: pointer;
    transition: background-color 0.3s;
}

button:hover {
    background-color: #d1d9e6;
}

button:active {
    background-color: #b3becd;
}
const audio = document.getElementById('audio');
const canvas = document.getElementById('audioCanvas');
const playButton = document.getElementById('playButton');
const pauseButton = document.getElementById('pauseButton');
const ctx = canvas.getContext('2d');

let audioContext;
let analyser;
let bufferLength;
let dataArray;

canvas.width = window.innerWidth / 2;
canvas.height = window.innerHeight / 3;

playButton.addEventListener('click', () => {
    if (!audioContext) {
        audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const source = audioContext.createMediaElementSource(audio);
        analyser = audioContext.createAnalyser();
        source.connect(analyser);
        analyser.connect(audioContext.destination);
        analyser.fftSize = 256;
        bufferLength = analyser.frequencyBinCount;
        dataArray = new Uint8Array(bufferLength);
    }
    audio.play();
    playButton.style.display = 'none';
    pauseButton.style.display = 'block';
    animate();
});

pauseButton.addEventListener('click', () => {
    audio.pause();
    playButton.style.display = 'block';
    pauseButton.style.display = 'none';
});

function animate() {
    if (audio.paused) {
        return;
    }
    requestAnimationFrame(animate);
    analyser.getByteFrequencyData(dataArray);
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    const barWidth = (canvas.width / bufferLength) * 2.5;
    let barHeight;
    let x = 0;

    for (let i = 0; i < bufferLength; i++) {
        barHeight = dataArray[i];
        const red = (barHeight + 100) % 255;
        const green = (barHeight + 150) % 255;
        const blue = (barHeight + 200) % 255;

        ctx.fillStyle = `rgb(${red},${green},${blue})`;
        ctx.fillRect(x, canvas.height - barHeight / 2, barWidth, barHeight / 2);

        x += barWidth + 1;
    }
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Neumorphism Chatroom with Age Verification</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="age-verification-container" id="ageVerificationContainer">
        <h2>Age Verification</h2>
        <label for="dob">Enter your date of birth:</label>
        <input type="date" id="dob">
        <button onclick="verifyAge()">Verify Age</button>
    </div>
    <div class="login-container" id="loginContainer" style="display: none;">
        <h2>Login</h2>
        <input type="text" id="username" placeholder="Username">
        <input type="password" id="password" placeholder="Password">
        <button onclick="login()">Login</button>
    </div>
    <div class="chat-container" id="chatContainer" style="display: none;">
        <div class="chat-box">
            <div class="messages" id="messages"></div>
            <div class="input-container">
                <input type="text" id="messageInput" placeholder="Type a message...">
                <button onclick="sendMessage()">Send</button>
            </div>
        </div>
        <button onclick="logout()">Logout</button>
        <button onclick="startVoiceCommand()">Start Voice Command</button>
        
        <!-- Audio Settings -->
        <div class="audio-settings-container">
            <h2>Audio Settings</h2>
            <label for="audioInputSelect">Select Audio Input:</label>
            <select id="audioInputSelect"></select>
            <button onclick="startAudio()">Start Audio</button>
        </div>
        
        <!-- Visualization -->
        <div class="visualization-container">
            <canvas id="audioCanvas"></canvas>
            <div class="controls">
                <button id="playButton">Play</button>
                <button id="pauseButton" style="display: none;">Pause</button>
            </div>
        </div>
    </div>
    <audio id="audio" src="path/to/your/audio/file.mp3"></audio>
    <script src="script.js"></script>
</body>
</html>
body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #e0e5ec;
    margin: 0;
    font-family: Arial, sans-serif;
}

.age-verification-container, .login-container, .chat-container, .audio-settings-container, .visualization-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    background: #e0e5ec;
    border-radius: 20px;
    box-shadow: 20px 20px 60px #babecc, -20px -20px 60px #ffffff;
    padding: 20px;
    margin: 20px;
}

canvas {
    border-radius: 20px;
    background: #f0f0f3;
    box-shadow: inset 10px 10px 20px #babecc, inset -10px -10px 20px #ffffff;
}

.controls {
    margin-top: 20px;
}

button {
    padding: 10px 20px;
    border: none;
    border-radius: 20px;
    background: #e0e5ec;
    box-shadow: 10px 10px 20px #babecc, -10px -10px 20px #ffffff;
    cursor: pointer;
    transition: background-color 0.3s;
}

button:hover {
    background-color: #d1d9e6;
}

button:active {
    background-color: #b3becd;
}
const audio = document.getElementById('audio');
const canvas = document.getElementById('audioCanvas');
const playButton = document.getElementById('playButton');
const pauseButton = document.getElementById('pauseButton');
const audioInputSelect = document.getElementById('audioInputSelect');
const ctx = canvas.getContext('2d');

let audioContext;
let analyser;
let bufferLength;
let dataArray;
let stream;

canvas.width = window.innerWidth / 2;
canvas.height = window.innerHeight / 3;

navigator.mediaDevices.enumerateDevices().then(devices => {
    devices.forEach(device => {
        if (device.kind === 'audioinput') {
            const option = document.createElement('option');
            option.value = device.deviceId;
            option.text = device.label || `Microphone ${audioInputSelect.length + 1}`;
            audioInputSelect.appendChild(option);
        }
    });
});

audioInputSelect.addEventListener('change', async () => {
    if (stream) {
        stream.getTracks().forEach(track => track.stop());
    }
    stream = await navigator.mediaDevices.getUserMedia({
        audio: {
            deviceId: { exact: audioInputSelect.value }
        }
    });
    setupAudioStream(stream);
});

function setupAudioStream(stream) {
    if (!audioContext) {
        audioContext = new (window.AudioContext || window.webkitAudioContext)();
        analyser = audioContext.createAnalyser();
        analyser.fftSize = 256;
        bufferLength = analyser.frequencyBinCount;
        dataArray = new Uint8Array(bufferLength);
    }
    const source = audioContext.createMediaStreamSource(stream);
    source.connect(analyser);
    animate();
}

playButton.addEventListener('click', () => {
    audio.play();
    playButton.style.display = 'none';
    pauseButton.style.display = 'block';
    animate();
});

pauseButton.addEventListener('click', () => {
    audio.pause();
    playButton.style.display = 'block';
    pauseButton.style.display = 'none';
});

function animate() {
    if (audio.paused) {
        return;
    }
    requestAnimationFrame(animate);
    analyser.getByteFrequencyData(dataArray);
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    const barWidth = (canvas.width / bufferLength) * 2.5;
    let barHeight;
    let x = 0;

    for (let i = 0; i < bufferLength; i++) {
        barHeight = dataArray[i];
        const red = (barHeight + 100) % 255;
        const green = (barHeight + 150) % 255;
        const blue = (barHeight + 200) % 255;

        ctx.fillStyle = `rgb(${red},${green},${blue})`;
        ctx.fillRect(x, canvas.height - barHeight / 2, barWidth, barHeight / 2);

        x += barWidth + 1;
    }
}

function startAudio() {
    audioContext.resume();
    playButton.click();
}

function verifyAge() {
    const dob = document.getElementById('dob').value;
    const birthDate = new Date(dob);
    const today = new Date();
    const age = today.getFullYear() - birthDate.getFullYear();
    const monthDifference = today.getMonth() - birthDate.getMonth();

    if (monthDifference < 0 || (monthDifference === 0 && today.getDate() < birthDate.getDate())) {
        age--;
    }

    if (age >= 18) {
        document.getElementById('ageVerificationContainer').style.display = 'none';
        document.getElementById('loginContainer').style.display = 'flex';
    } else {
        alert('You must be 18 years or older to access this chatroom.');
    }
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Neumorphism Chatroom with Age Verification</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="age-verification-container" id="ageVerificationContainer">
        <h2>Age Verification</h2>
        <label for="dob">Enter your date of birth:</label>
        <input type="date" id="dob">
        <button onclick="verifyAge()">Verify Age</button>
    </div>
    <div class="login-container" id="loginContainer" style="display: none;">
        <h2>Login</h2>
        <input type="text" id="username" placeholder="Username">
        <input type="password" id="password" placeholder="Password">
        <button onclick="login()">Login</button>
    </div>
    <div class="chat-container" id="chatContainer" style="display: none;">
        <div class="chat-box">
            <div class="messages" id="messages"></div>
            <div class="input-container">
                <input type="text" id="messageInput" placeholder="Type a message...">
                <button onclick="sendMessage()">Send</button>
            </div>
        </div>
        <button onclick="logout()">Logout</button>
        <button onclick="startVoiceCommand()">Start Voice Command</button>
        
        <!-- Audio Settings -->
        <div class="audio-settings-container">
            <h2>Audio Settings</h2>
            <label for="audioInputSelect">Select Audio Input:</label>
            <select id="audioInputSelect"></select>
            <button onclick="startAudio()">Start Audio</button>
        </div>
        
        <!-- Visualization -->
        <div class="visualization-container">
            <canvas id="audioCanvas"></canvas>
            <div class="controls">
                <button id="playButton">Play</button>
                <button id="pauseButton" style="display: none;">Pause</button>
            </div>
        </div>
    </div>
    <audio id="audio" src="path/to/your/audio/file.mp3"></audio>
    <script src="script.js"></script>
</body>
</html>
const audio = document.getElementById('audio');
const canvas = document.getElementById('audioCanvas');
const playButton = document.getElementById('playButton');
const pauseButton = document.getElementById('pauseButton');
const audioInputSelect = document.getElementById('audioInputSelect');
const ctx = canvas.getContext('2d');

let audioContext;
let analyser;
let bufferLength;
let dataArray;
let stream;

canvas.width = window.innerWidth / 2;
canvas.height = window.innerHeight / 3;

navigator.mediaDevices.enumerateDevices().then(devices => {
    devices.forEach(device => {
        if (device.kind === 'audioinput') {
            const option = document.createElement('option');
            option.value = device.deviceId;
            option.text = device.label || `Microphone ${audioInputSelect.length + 1}`;
            audioInputSelect.appendChild(option);
        }
    });
});

audioInputSelect.addEventListener('change', async () => {
    if (stream) {
        stream.getTracks().forEach(track => track.stop());
    }
    stream = await navigator.mediaDevices.getUserMedia({
        audio: {
            deviceId: { exact: audioInputSelect.value }
        }
    });
    setupAudioStream(stream);
});

function setupAudioStream(stream) {
    if (!audioContext) {
        audioContext = new (window.AudioContext || window.webkitAudioContext)();
        analyser = audioContext.createAnalyser();
        analyser.fftSize = 256;
        bufferLength = analyser.frequencyBinCount;
        dataArray = new Uint8Array(bufferLength);
    }
    const source = audioContext.createMediaStreamSource(stream);
    source.connect(analyser);
    animate();
}

playButton.addEventListener('click', () => {
    audio.play();
    playButton.style.display = 'none';
    pauseButton.style.display = 'block';
    animate();
});

pauseButton.addEventListener('click', () => {
    audio.pause();
    playButton.style.display = 'block';
    pauseButton.style.display = 'none';
});

function animate() {
    if (audio.paused) {
        return;
    }
    requestAnimationFrame(animate);
    analyser.getByteFrequencyData(dataArray);
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    const barWidth = (canvas.width / bufferLength) * 2.5;
    let barHeight;
    let x = 0;

    for (let i = 0; i < bufferLength; i++) {
        barHeight = dataArray[i];
        const red = (barHeight + 100) % 255;
        const green = (barHeight + 150) % 255;
        const blue = (barHeight + 200) % 255;

        ctx.fillStyle = `rgb(${red},${green},${blue})`;
        ctx.fillRect(x, canvas.height - barHeight / 2, barWidth, barHeight / 2);

        x += barWidth + 1;
    }
}

function startAudio() {
    audioContext.resume();
    playButton.click();
}

function verifyAge() {
    const dob = document.getElementById('dob').value;
    const birthDate = new Date(dob);
    const today = new Date();
    const age = today.getFullYear() - birthDate.getFullYear();
    const monthDifference = today.getMonth() - birthDate.getMonth();

    if (monthDifference < 0 || (monthDifference === 0 && today.getDate() < birthDate.getDate())) {
        age--;
    }

    if (age >= 18) {
        document.getElementById('ageVerificationContainer').style.display = 'none';
        document.getElementById('loginContainer').style.display = 'flex';
    } else {
        alert('You must be 18 years or older to access this chatroom.');
    }
}

// User management
let currentAdmin = 'user1';
const users = ['user1', 'user2', 'user3', 'user4'];

function promoteNextUser() {
    users.sort();
    const nextAdmin = users.find(user => user !== currentAdmin);
    if (nextAdmin) {
        currentAdmin = nextAdmin;
        alert(`New admin: ${currentAdmin}`);
    } else {
        alert('No users available to promote.');
    }
}

// Example function for demotion (could be triggered by admin action)
function demoteAdmin() {
    alert(`${currentAdmin} is being demoted.`);
    promoteNextUser();
}

// Example trigger for demoting the current admin
document.addEventListener('keydown', (event) => {
    if (event.key === 'd' && event.altKey) {
        demoteAdmin();
    }
});
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Neumorphism Chatroom with Age Verification</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="age-verification-container" id="ageVerificationContainer">
        <h2>Age Verification</h2>
        <label for="dob">Enter your date of birth:</label>
        <input type="date" id="dob">
        <button onclick="verifyAge()">Verify Age</button>
    </div>
    <div class="login-container" id="loginContainer" style="display: none;">
        <h2>Login</h2>
        <input type="text" id="username" placeholder="Username">
        <input type="password" id="password" placeholder="Password">
        <button onclick="login()">Login</button>
    </div>
    <div class="chat-container" id="chatContainer" style="display: none;">
        <div class="chat-box">
            <div class="messages" id="messages"></div>
            <div class="input-container">
                <input type="text" id="messageInput" placeholder="Type a message...">
                <button onclick="sendMessage()">Send</button>
            </div>
        </div>
        <button onclick="logout()">Logout</button>
        <button onclick="startVoiceCommand()">Start Voice Command</button>
        
        <!-- Audio Settings -->
        <div class="audio-settings-container">
            <h2>Audio Settings</h2>
            <label for="audioInputSelect">Select Audio Input:</label>
            <select id="audioInputSelect"></select>
            <button onclick="startAudio()">Start Audio</button>
        </div>
        
        <!-- Visualization -->
        <div class="visualization-container">
            <canvas id="audioCanvas"></canvas>
            <div class="controls">
                <button id="playButton">Play</button>
                <button id="pauseButton" style="display: none;">Pause</button>
            </div>
        </div>
        
        <!-- Admin Profile and Username -->
        <img src="path/to/admin-profile.jpg" alt="Admin Profile" class="profile-pic admin">
        <span class="admin-username">Admin Username</span>
    </div>
    <audio id="audio" src="path/to/your/audio/file.mp3"></audio>
    <script src="script.js"></script>
</body>
</html>
body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #e0e5ec;
    margin: 0;
    font-family: Arial, sans-serif;
}

.age-verification-container, .login-container, .chat-container, .audio-settings-container, .visualization-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    background: #e0e5ec;
    border-radius: 20px;
    box-shadow: 20px 20px 60px #babecc, -20px -20px 60px #ffffff;
    padding: 20px;
    margin: 20px;
}

canvas {
    border-radius: 20px;
    background: #f0f0f3;
    box-shadow: inset 10px 10px 20px #babecc, inset -10px -10px 20px #ffffff;
}

.controls {
    margin-top: 20px;
}

button {
    padding: 10px 20px;
    border: none;
    border-radius: 20px;
    background: #e0e5ec;
    box-shadow: 10px 10px 20px #babecc, -10px -10px 20px #ffffff;
    cursor: pointer;
    transition: background-color 0.3s;
}

button:hover {
    background-color: #d1d9e6;
}

button:active {
    background-color: #b3becd;
}

.profile-pic {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    margin-bottom: 20px;
    box-shadow: 10px 10px 20px #babecc, -10px -10px 20px #ffffff;
}

.admin-username {
    font-size: 1.5em;
    font-weight: bold;
}
const audio = document.getElementById('audio');
const canvas = document.getElementById('audioCanvas');
const playButton = document.getElementById('playButton');
const pauseButton = document.getElementById('pauseButton');
const audioInputSelect = document.getElementById('audioInputSelect');
const ctx = canvas.getContext('2d');

let audioContext;
let analyser;
let bufferLength;
let dataArray;
let stream;

canvas.width = window.innerWidth / 2;
canvas.height = window.innerHeight / 3;

navigator.mediaDevices.enumerateDevices().then(devices => {
    devices.forEach(device => {
        if (device.kind === 'audioinput') {
            const option = document.createElement('option');
            option.value = device.deviceId;
            option.text = device.label || `Microphone ${audioInputSelect.length + 1}`;
            audioInputSelect.appendChild(option);
        }
    });
});

audioInputSelect.addEventListener('change', async () => {
    if (stream) {
        stream.getTracks().forEach(track => track.stop());
    }
    stream = await navigator.mediaDevices.getUserMedia({
        audio: {
            deviceId: { exact: audioInputSelect.value }
        }
    });
    setupAudioStream(stream);
});

function setupAudioStream(stream) {
    if (!audioContext) {
        audioContext = new (window.AudioContext || window.webkitAudioContext)();
        analyser = audioContext.createAnalyser();
        analyser.fftSize = 256;
        bufferLength = analyser.frequencyBinCount;
        dataArray = new Uint8Array(bufferLength);
    }
    const source = audioContext.createMediaStreamSource(stream);
    source.connect(analyser);
    animate();
}

playButton.addEventListener('click', () => {
    audio.play();
    playButton.style.display = 'none';
    pauseButton.style.display = 'block';
    animate();
});

pauseButton.addEventListener('click', () => {
    audio.pause();
    playButton.style.display = 'block';
    pauseButton.style.display = 'none';
});

function animate() {
    if (audio.paused) {
        return;
    }
    requestAnimationFrame(animate);
    analyser.getByteFrequencyData(dataArray);
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    const barWidth = (canvas.width / bufferLength) * 2.5;
    let barHeight;
    let x = 0;

    for (let i = 0; i < bufferLength; i++) {
        barHeight = dataArray[i];
        const red = (barHeight + 100) % 255;
        const green = (barHeight + 150) % 255;
        const blue = (barHeight + 200) % 255;

        ctx.fillStyle = `rgb(${red},${green},${blue})`;
        ctx.fillRect(x, canvas.height - barHeight / 2, barWidth, barHeight / 2);

        x += barWidth + 1;
    }

    animateProfileAndUsername();
}

function animateProfileAndUsername() {
    const average = dataArray.reduce((a, b) => a + b) / dataArray.length;
    const scale = Math.max(0.8, average / 256);

    document.querySelector('.profile-pic.admin').style.transform = `scale(${scale})`;
    document.querySelector('.admin-username').style.color = `rgb(${(average + 100) % 255}, ${(average + 150) % 255}, ${(average + 200) % 255})`;
}

function startAudio() {
    audioContext.resume();
    playButton.click();
}

function verifyAge() {
    const dob = document.getElementById('dob').value;
    const birthDate = new Date(dob);
    const today = new Date();
    const age = today.getFullYear() - birthDate.getFullYear();
    const monthDifference = today.getMonth() - birthDate.getMonth();

    if (monthDifference < 0 || (monthDifference === 0 && today.getDate() < birthDate.getDate())) {
        age--;
    }

    if (age >= 18) {
        document.getElementById('ageVerificationContainer').style.display = 'none';
        document.getElementById('loginContainer').style.display = 'flex';
    } else {
        alert('You must be 18 years or older to access this chatroom.');
    }
}

// User management
let currentAdmin = 'user1';
const users = ['user1', 'user2', 'user3', 'user4'];

function promoteNextUser[_{{{CITATION{{{_1{](https://github.com/robertoshimizu/tailwindcss2.0/tree/fafc0ac3d3c41aea49a9dfd46bae99ee542e26e7/README.md)[_{{{CITATION{{{_2{](https://github.com/EleanorEllingson/web-dev/tree/b2f2a382e77a20fd6895677c8b8f402ac4bae352/7-bank-project%2F1-template-route%2Ftranslations%2FREADME.ko.md)[_{{{CITATION{{{_3{](https://github.com/JuanTincho/intive-test/tree/0604f5f123dfceeb4b41721d6572c435e5da79ac/src%2Futils%2FhelperFunctions.js)