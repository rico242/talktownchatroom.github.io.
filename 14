<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enhanced Neumorphism Chatroom</title>
    <link rel="stylesheet" href="style.css">
    <script src="https://www.google.com/recaptcha/api.js" async defer></script>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"></script>
</head>
<body>
    <!-- Authentication Form with CAPTCHA -->
    <div class="auth-container">
        <h2>Login</h2>
        <form id="authForm">
            <input type="text" id="username" placeholder="Username" required>
            <input type="password" id="password" placeholder="Password" required>
            <div class="g-recaptcha" data-sitekey="YOUR_RECAPTCHA_SITE_KEY"></div>
            <button type="submit">Login</button>
        </form>
    </div>

    <div id="chatContainer" style="display: none;">
        <!-- Chat Box and other content here -->
        <div class="chat-box">
            <div class="messages" id="messages"></div>
            <div class="input-container">
                <input type="text" id="messageInput" placeholder="Type a message...">
                <button onclick="sendMessage()">Send</button>
            </div>
        </div>
    </div>

    <audio id="audio" src="path/to/your/audio/file.mp3"></audio>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/annyang/2.6.1/annyang.min.js"></script>
    <script src="script.js"></script>
</body>
</html>
body {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    height: 100vh;
    background-color: var(--bg-color);
    margin: 0;
    font-family: Arial, sans-serif;
    transition: background-color 0.5s, color 0.5s;
}

.auth-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    background: #e0e5ec;
    border-radius: 20px;
    box-shadow: 20px 20px 60px #babecc, -20px -20px 60px #ffffff;
    padding: 20px;
    margin: 20px;
    opacity: 0;
    animation: slideIn 1s forwards;
}

.chat-box {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    background: #e0e5ec;
    border-radius: 20px;
    box-shadow: 20px 20px 60px #babecc, -20px -20px 60px #ffffff;
    padding: 20px;
    width: 400px;
    height: 400px;
    overflow-y: auto;
    opacity: 0;
    animation: fadeIn 1s 0.5s forwards;
}

.messages {
    flex: 1;
    overflow-y: auto;
}

.input-container {
    display: flex;
}

input {
    flex: 1;
    padding: 10px;
    border: none;
    border-radius: 20px;
    box-shadow: inset 10px 10px 20px #babecc, inset -10px -10px 20px #ffffff;
    background: #e0e5ec;
    outline: none;
    transition: background-color 0.5s, box-shadow 0.5s;
}

input:focus {
    background-color: #d1d9e6;
    box-shadow: inset 8px 8px 16px #babecc, inset -8px -8px 16px #ffffff;
}

button {
    margin-left: 10px;
    padding: 10px 20px;
    border: none;
    border-radius: 20px;
    background: #e0e5ec;
    box-shadow: 10px 10px 20px #babecc, -10px -10px 20px #ffffff;
    cursor: pointer;
    transition: background-color 0.3s, transform 0.3s;
}

button:hover {
    background-color: #d1d9e6;
    transform: translateY(-2px);
}

@keyframes fadeIn {
    0% {
        opacity: 0;
    }
    100% {
        opacity: 1;
    }
}

@keyframes slideIn {
    0% {
        opacity: 0;
        transform: translateY(-100px);
    }
    100% {
        opacity: 1;
        transform: translateY(0);
    }
}

:root {
    --bg-color: #e0e5ec;
    --text-color: #000;
}

body.dark-mode {
    --bg-color: #1e1e1e;
    --text-color: #f1f1f1;
}
let threatDetectionModel;

// Load Machine Learning Model for Threat Detection
async function loadThreatDetectionModel() {
    threatDetectionModel = await tf.loadLayersModel('path/to/your/model.json');
}

// Initialize the model
loadThreatDetectionModel().then(() => {
    console.log('Threat detection model loaded');
});
async function detectThreat(message) {
    const input = tf.tensor([message.split('').map(char => char.charCodeAt(0))]);
    const prediction = await threatDetectionModel.predict(input).data();
    return prediction[0] > 0.5; // Assuming the model returns a probability
}
async function sendMessage() {
    let messageText = messageInput.value.trim();
    if (messageText) {
        const isThreat = await detectThreat(messageText);
        if (isThreat) {
            alert('Potential threat detected. Message not sent.');
            logActivity('Threat Detected', messageText);
        } else {
            logActivity('Message Sent', messageText);
            const encryptedMessage = encryptMessage(messageText);
            const messageElement = document.createElement('div');
            messageElement.textContent = encryptedMessage; // In a real scenario, you'd decrypt for display
            messagesContainer.appendChild(messageElement);
            messageInput.value = '';
        }
    }
}
async function retrainModel(newData, newLabels) {
    const input = tf.tensor(newData);
    const labels = tf.tensor(newLabels);

    const model = tf.sequential();
    model.add(tf.layers.dense({ units: 128, activation: 'relu', inputShape: [input.shape[1]] }));
    model.add(tf.layers.dense({ units: 1, activation: 'sigmoid' }));

    model.compile({ optimizer: 'adam', loss: 'binaryCrossentropy', metrics: ['accuracy'] });

    await model.fit(input, labels, { epochs: 10 });

    threatDetectionModel = model;
}

// Example of retraining with new data
const newThreatData = [['new threat message']];
const newThreatLabels = [1]; // 1 for threat, 0 for no threat
retrainModel(newThreatData, newThreatLabels);
document.addEventListener('DOMContentLoaded', () => {
    const themeSwitcher = document.getElementById('themeSwitcher');
    
    themeSwitcher.addEventListener('change', () => {
        document.body.classList.toggle('dark-mode', themeSwitcher.checked);
    });

    // Retain theme preference after page reload
    const currentTheme = localStorage.getItem('theme');
    if (currentTheme) {
        document.body.classList.toggle('dark-mode', currentTheme === 'dark');
        themeSwitcher.checked = currentTheme === 'dark';
    }

    themeSwitcher.addEventListener('change', () => {
        const theme = themeSwitcher.checked ? 'dark' : 'light';
        document.body.classList.toggle('dark-mode', theme === 'dark');
        localStorage.setItem('theme', theme);
    });

    document.getElementById('authForm').addEventListener('submit', function(event) {
        event.preventDefault();
        const username = document.getElementById('username').value;
        const password = document.getElementById('password').value;
        const recaptchaResponse =[_{{{CITATION{{{_1{](https://github.com/EleanorEllingson/web-dev/tree/b2f2a382e77a20fd6895677c8b8f402ac4bae352/7-bank-project%2F1-template-route%2Ftranslations%2FREADME.ko.md)[_{{{CITATION{{{_2{](https://github.com/luisaph/the-code-of-music/tree/01ef3138212a81059b73e9cb24755a4d9d3de8ea/README.md)