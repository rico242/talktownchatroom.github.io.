<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Neumorphism Chatroom with Video Call</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <!-- Other sections remain the same -->

    <!-- Video Call Section -->
    <div class="video-call-container" id="videoCallContainer">
        <video id="localVideo" autoplay muted></video>
        <video id="remoteVideo" autoplay></video>
        <div class="controls">
            <button onclick="startVideoCall()">Start Call</button>
            <button onclick="toggleMask()">Toggle Mask</button>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/webcam-easy/1.0.0/webcam-easy.min.js"></script>
    <script src="https://pixijs.download/release/pixi.min.js"></script>
    <script src="script.js"></script>
</body>
</html>
body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #e0e5ec;
    margin: 0;
    font-family: Arial, sans-serif;
}

.video-call-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    background: #e0e5ec;
    border-radius: 20px;
    box-shadow: 20px 20px 60px #babecc, -20px -20px 60px #ffffff;
    padding: 20px;
    margin: 20px;
}

video {
    width: 300px;
    height: 200px;
    border-radius: 20px;
    background: #f0f0f3;
    box-shadow: inset 10px 10px 20px #babecc, inset -10px -10px 20px #ffffff;
    margin-bottom: 20px;
}

.controls {
    display: flex;
    gap: 10px;
}

button {
    padding: 10px 20px;
    border: none;
    border-radius: 20px;
    background: #e0e5ec;
    box-shadow: 10px 10px 20px #babecc, -10px -10px 20px #ffffff;
    cursor: pointer;
    transition: background-color 0.3s;
}

button:hover {
    background-color: #d1d9e6;
}

button:active {
    background-color: #b3becd;
}
const localVideo = document.getElementById('localVideo');
const remoteVideo = document.getElementById('remoteVideo');
const webcam = new Webcam(localVideo, 'user');

let app;
let maskFilter;

// Initialize PIXI.js application
function initPixi() {
    app = new PIXI.Application({
        view: localVideo,
        width: localVideo.width,
        height: localVideo.height,
        transparent: true
    });

    maskFilter = new PIXI.filters.ColorMatrixFilter();
    app.stage.filters = [maskFilter];
}

// Start Video Call
function startVideoCall() {
    webcam.start()
        .then(() => {
            initPixi();
            localVideo.srcObject.getVideoTracks().forEach(track => {
                track.onended = () => {
                    app.stage.filters = [];
                };
            });
        })
        .catch(err => console.log(err));
}

// Toggle Mask
function toggleMask() {
    if (app.stage.filters.length > 0) {
        app.stage.filters = [];
    } else {
        app.stage.filters = [maskFilter];
        maskFilter.blackAndWhite(true);
    }
}

// Simulating remote video for demo purposes (replace with actual remote video stream in real application)
function simulateRemoteVideo() {
    remoteVideo.srcObject = localVideo.srcObject;
}

// Event Listeners
localVideo.addEventListener('play', () => {
    simulateRemoteVideo();
});
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Neumorphism Chatroom with Video Call</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <!-- Other sections remain the same -->

    <!-- Video Call Section -->
    <div class="video-call-container" id="videoCallContainer">
        <video id="localVideo" autoplay muted></video>
        <video id="remoteVideo" autoplay></video>
        <div class="controls">
            <button onclick="startVideoCall()">Start Call</button>
            <button onclick="toggleMask()">Toggle Mask</button>
            <button onclick="reportNudity()">Report Nudity</button>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/webcam-easy/1.0.0/webcam-easy.min.js"></script>
    <script src="https://pixijs.download/release/pixi.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/nsfwjs"></script>
    <script src="script.js"></script>
</body>
</html>
body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #e0e5ec;
    margin: 0;
    font-family: Arial, sans-serif;
}

.video-call-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    background: #e0e5ec;
    border-radius: 20px;
    box-shadow: 20px 20px 60px #babecc, -20px -20px 60px #ffffff;
    padding: 20px;
    margin: 20px;
}

video {
    width: 300px;
    height: 200px;
    border-radius: 20px;
    background: #f0f0f3;
    box-shadow: inset 10px 10px 20px #babecc, inset -10px -10px 20px #ffffff;
    margin-bottom: 20px;
}

.controls {
    display: flex;
    gap: 10px;
}

button {
    padding: 10px 20px;
    border: none;
    border-radius: 20px;
    background: #e0e5ec;
    box-shadow: 10px 10px 20px #babecc, -10px -10px 20px #ffffff;
    cursor: pointer;
    transition: background-color 0.3s;
}

button:hover {
    background-color: #d1d9e6;
}

button:active {
    background-color: #b3becd;
}
const localVideo = document.getElementById('localVideo');
const remoteVideo = document.getElementById('remoteVideo');
const webcam = new Webcam(localVideo, 'user');
let app;
let maskFilter;
let nsfwModel;

// Initialize PIXI.js application
function initPixi() {
    app = new PIXI.Application({
        view: localVideo,
        width: localVideo.width,
        height: localVideo.height,
        transparent: true
    });

    maskFilter = new PIXI.filters.ColorMatrixFilter();
    app.stage.filters = [maskFilter];
}

// Load NSFWJS model
async function loadNsfwModel() {
    nsfwModel = await nsfwjs.load();
}

// Start Video Call
function startVideoCall() {
    webcam.start()
        .then(() => {
            initPixi();
            loadNsfwModel();
            localVideo.srcObject.getVideoTracks().forEach(track => {
                track.onended = () => {
                    app.stage.filters = [];
                };
            });
        })
        .catch(err => console.log(err));
}

// Toggle Mask
function toggleMask() {
    if (app.stage.filters.length > 0) {
        app.stage.filters = [];
    } else {
        app.stage.filters = [maskFilter];
        maskFilter.blackAndWhite(true);
    }
}

// Simulating remote video for demo purposes (replace with actual remote video stream in real application)
function simulateRemoteVideo() {
    remoteVideo.srcObject = localVideo.srcObject;
}

// Detect Nudity
async function detectNudity() {
    const predictions = await nsfwModel.classify(localVideo);
    const nudityDetected = predictions.some(prediction => prediction.className === 'Porn' && prediction.probability > 0.8);
    return nudityDetected;
}

// Report Nudity
async function reportNudity() {
    const nudityDetected = await detectNudity();
    if (nudityDetected) {
        alert('Nudity detected! Reporting to admin...');
        // Implement reporting logic here (e.g., send a message to the admin)
    } else {
        alert('No nudity detected.');
    }
}

// Event Listeners
localVideo.addEventListener('play', () => {
    simulateRemoteVideo();
});
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Neumorphism Chatroom with Video Call</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <!-- Other sections remain the same -->

    <!-- Chat Box with Translation -->
    <div class="chat-box">
        <div class="messages" id="messages"></div>
        <div class="input-container">
            <input type="text" id="messageInput" placeholder="Type a message...">
            <button onclick="sendMessage()">Send</button>
        </div>
    </div>
    <audio id="audio" src="path/to/your/audio/file.mp3"></audio>
    <script src="script.js"></script>
</body>
</html>
body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #e0e5ec;
    margin: 0;
    font-family: Arial, sans-serif;
}

.chat-box {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    background: #e0e5ec;
    border-radius: 20px;
    box-shadow: 20px 20px 60px #babecc, -20px -20px 60px #ffffff;
    padding: 20px;
    width: 400px;
    height: 600px;
}

.messages {
    flex: 1;
    overflow-y: auto;
}

.input-container {
    display: flex;
}

input {
    flex: 1;
    padding: 10px;
    border: none;
    border-radius: 20px;
    box-shadow: inset 10px 10px 20px #babecc, inset -10px -10px 20px #ffffff;
    background: #e0e5ec;
    outline: none;
}

button {
    margin-left: 10px;
    padding: 10px 20px;
    border: none;
    border-radius: 20px;
    background: #e0e5ec;
    box-shadow: 10px 10px 20px #babecc, -10px -10px 20px #ffffff;
    cursor: pointer;
}

button:hover {
    box-shadow: inset 10px 10px 20px #babecc, inset -10px -10px 20px #ffffff;
}

.translated-message {
    margin-top: 10px;
    color: gray;
    font-size: 0.9em;
}
const messageInput = document.getElementById('messageInput');
const messagesContainer = document.getElementById('messages');

function sendMessage() {
    const messageText = messageInput.value.trim();
    if (messageText) {
        const messageElement = document.createElement('div');
        messageElement.textContent = messageText;
        messagesContainer.appendChild(messageElement);
        
        translateMessage(messageText, 'en').then(translatedText => {
            const translatedMessageElement = document.createElement('div');
            translatedMessageElement.textContent = translatedText;
            translatedMessageElement.classList.add('translated-message');
            messagesContainer.appendChild(translatedMessageElement);
        });

        messageInput.value = '';
    }
}

async function translateMessage(text, targetLang) {
    const response = await fetch('https://translation.googleapis.com/language/translate/v2', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer YOUR_API_KEY'
        },
        body: JSON.stringify({
            q: text,
            target: targetLang
        })
    });
    
    const result = await response.json();
    return result.data.translations[0].translatedText;
}
const messageInput = document.getElementById('messageInput');
const messagesContainer = document.getElementById('messages');

function sendMessage() {
    const messageText = messageInput.value.trim();
    if (messageText) {
        if (containsURL(messageText)) {
            alert('Links are not allowed!');
        } else {
            const messageElement = document.createElement('div');
            messageElement.textContent = messageText;
            messagesContainer.appendChild(messageElement);

            translateMessage(messageText, 'en').then(translatedText => {
                const translatedMessageElement = document.createElement('div');
                translatedMessageElement.textContent = translatedText;
                translatedMessageElement.classList.add('translated-message');
                messagesContainer.appendChild(translatedMessageElement);
            });

            messageInput.value = '';
        }
    }
}

function containsURL(text) {
    const urlPattern = /(https?:\/\/[^\s]+)/g;
    return urlPattern.test(text);
}

async function translateMessage(text, targetLang) {
    const response = await fetch('https://translation.googleapis.com/language/translate/v2', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer YOUR_API_KEY'
        },
        body: JSON.stringify({
            q: text,
            target: targetLang
        })
    });
    
    const result = await response.json();
    return result.data.translations[0].translatedText;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Neumorphism Chatroom with Video Call</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <!-- Other sections remain the same -->

    <!-- Reel Section -->
    <div class="reel-container" id="reelContainer">
        <h2>Snapchat Reel</h2>
        <input type="file" id="videoUpload" accept="video/*">
        <button onclick="uploadVideo()">Upload</button>
        <div class="reel" id="reel"></div>
    </div>
    <!-- Comment Section -->
    <div class="comment-box" id="commentBox">
        <input type="text" id="commentInput" placeholder="Add a comment...">
        <button onclick="addComment()">Post</button>
        <div class="comments" id="comments"></div>
    </div>

    <audio id="audio" src="path/to/your/audio/file.mp3"></audio>
    <script src="script.js"></script>
</body>
</html>
body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #e0e5ec;
    margin: 0;
    font-family: Arial, sans-serif;
}

.reel-container, .comment-box {
    display: flex;
    flex-direction: column;
    align-items: center;
    background: #e0e5ec;
    border-radius: 20px;
    box-shadow: 20px 20px 60px #babecc, -20px -20px 60px #ffffff;
    padding: 20px;
    margin: 20px;
}

.reel {
    width: 100%;
    max-width: 600px;
    overflow: hidden;
}

.reel video {
    width: 100%;
    border-radius: 20px;
    margin-bottom: 10px;
}

.comment-box {
    width: 100%;
    max-width: 600px;
}

.comments {
    width: 100%;
    margin-top: 20px;
}

.comment {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: #fff;
    padding: 10px;
    border-radius: 10px;
    box-shadow: 5px 5px 15px #babecc, -5px -5px 15px #ffffff;
    margin-bottom: 10px;
}

.comment span {
    flex: 1;
}

.comment .reactions {
    display: flex;
    gap: 10px;
}

.reactions button {
    background: none;
    border: none;
    cursor: pointer;
}
const reelContainer = document.getElementById('reelContainer');
const reel = document.getElementById('reel');
const commentInput = document.getElementById('commentInput');
const commentsContainer = document.getElementById('comments');

function uploadVideo() {
    const videoUpload = document.getElementById('videoUpload');
    const file = videoUpload.files[0];
    if (file) {
        const videoElement = document.createElement('video');
        videoElement.src = URL.createObjectURL(file);
        videoElement.controls = true;
        reel.appendChild(videoElement);
        videoUpload.value = '';
    }
}

function addComment() {
    const commentText = commentInput.value.trim();
    if (commentText) {
        const commentElement = document.createElement('div');
        commentElement.classList.add('comment');
        commentElement.innerHTML = `
            <span>${commentText}</span>
            <div class="reactions">
                <button onclick="likeComment(this)">👍</button>
                <button onclick="dislikeComment(this)">👎</button>
            </div>
        `;
        commentsContainer.appendChild(commentElement);
        commentInput.value = '';
    }
}

function likeComment(button) {
    button.textContent = `👍 ${parseInt(button.textContent.split(' ')[1] || 0) + 1}`;
}

function dislikeComment(button) {
    button.textContent = `👎 ${parseInt(button.textContent.split(' ')[1] || 0) + 1}`;
}
const messageInput = document.getElementById('messageInput');
const messagesContainer = document.getElementById('messages');
const recentMessages = [];
const spamThreshold = 3; // Number of allowed repeated messages before considering as spam

function sendMessage() {
    const messageText = messageInput.value.trim();
    if (messageText) {
        if (containsURL(messageText)) {
            alert('Links are not allowed!');
        } else if (isRepeatedText(messageText)) {
            alert('Spam detected! Repeated message.');
        } else {
            const messageElement = document.createElement('div');
            messageElement.textContent = messageText;
            messagesContainer.appendChild(messageElement);

            translateMessage(messageText, 'en').then(translatedText => {
                const translatedMessageElement = document.createElement('div');
                translatedMessageElement.textContent = translatedText;
                translatedMessageElement.classList.add('translated-message');
                messagesContainer.appendChild(translatedMessageElement);
            });

            messageInput.value = '';
            trackMessage(messageText);
        }
    }
}

function containsURL(text) {
    const urlPattern = /(https?:\/\/[^\s]+)/g;
    return urlPattern.test(text);
}

function isRepeatedText(text) {
    const repeats = recentMessages.filter(msg => msg === text).length;
    return repeats >= spamThreshold;
}

function trackMessage(text) {
    recentMessages.push(text);
    if (recentMessages.length > spamThreshold) {
        recentMessages.shift(); // Remove oldest message to keep the array within the threshold size
    }
}

async function translateMessage(text, targetLang) {
    const response = await fetch('https://translation.googleapis.com/language/translate/v2', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer YOUR_API_KEY'
        },
        body: JSON.stringify({
            q: text,
            target: targetLang
        })
    });
    
    const result = await response.json();
    return result.data.translations[0].translatedText;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Neumorphism Chatroom with Video Call</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <!-- Chat Box -->
    <div class="chat-box">
        <div class="messages" id="messages"></div>
        <div class="input-container">
            <input type="text" id="messageInput" placeholder="Type a message...">
            <button onclick="sendMessage()">Send</button>
        </div>
    </div>
    <audio id="audio" src="path/to/your/audio/file.mp3"></audio>
    <script src="script.js"></script>
</body>
</html>
body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #e0e5ec;
    margin: 0;
    font-family: Arial, sans-serif;
}

.chat-box {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    background: #e0e5ec;
    border-radius: 20px;
    box-shadow: 20px 20px 60px #babecc, -20px -20px 60px #ffffff;
    padding: 20px;
    width: 400px;
    height: 600px;
    overflow-y: auto; /* Enable scrolling */
}

.messages {
    flex: 1;
    overflow-y: auto; /* Enable scrolling */
}

/* Custom Scrollbar Styles */
::-webkit-scrollbar {
    width: 10px;
}

::-webkit-scrollbar-track {
    background: #e0e5ec;
    border-radius: 20px;
}

::-webkit-scrollbar-thumb {
    background: linear-gradient(90deg, #ff7b54, #ff7b54, #ffda79);
    border-radius: 20px;
    transition: background-color 0.3s;
}

::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(90deg, #ffda79, #ff7b54, #ff7b54);
    cursor: pointer;
}

.input-container {
    display: flex;
}

input {
    flex: 1;
    padding: 10px;
    border: none;
    border-radius: 20px;
    box-shadow: inset 10px 10px 20px #babecc, inset -10px -10px 20px #ffffff;
    background: #e0e5ec;
    outline: none;
}

button {
    margin-left: 10px;
    padding: 10px 20px;
    border: none;
    border-radius: 20px;
    background: #e0e5ec;
    box-shadow: 10px 10px 20px #babecc, -10px -10px 20px #ffffff;
    cursor: pointer;
}

button:hover {
    box-shadow: inset 10px 10px 20px #babecc, inset -10px -10px 20px #ffffff;
}

/* Custom Scrollbar Animation */
@keyframes scrollbarColorChange {
    0% {
        background: #ff7b54;
    }
    50% {
        background: #ffda79;
    }
    100% {
        background: #ff7b54;
    }
}

::-webkit-scrollbar-thumb {
    animation: scrollbarColorChange 2s infinite;
}
const messageInput = document.getElementById('messageInput');
const messagesContainer = document.getElementById('messages');
const recentMessages = [];
const spamThreshold = 3; // Number of allowed repeated messages before considering as spam

// Mock function to simulate loading a trained model
async function loadThreatDetectionModel() {
    // Load the pre-trained model (e.g., TensorFlow.js model)
    // For demonstration purposes, we'll mock this function
    return {
        predict: (text) => {
            // Simulate a prediction (0 = safe, 1 = threat)
            if (text.includes('threat')) {
                return 1;
            }
            return 0;
        }
    };
}

let threatDetectionModel;

// Load the model
loadThreatDetectionModel().then((model) => {
    threatDetectionModel = model;
});

function sendMessage() {
    const messageText = messageInput.value.trim();
    if (messageText) {
        if (containsURL(messageText)) {
            alert('Links are not allowed!');
        } else if (isRepeatedText(messageText)) {
            alert('Spam detected! Repeated message.');
        } else if (detectSecurityThreat(messageText)) {
            alert('Security threat detected! Message deleted.');
        } else {
            const messageElement = document.createElement('div');
            messageElement.textContent = messageText;
            messagesContainer.appendChild(messageElement);

            translateMessage(messageText, 'en').then(translatedText => {
                const translatedMessageElement = document.createElement('div');
                translatedMessageElement.textContent = translatedText;
                translatedMessageElement.classList.add('translated-message');
                messagesContainer.appendChild(translatedMessageElement);
            });

            messageInput.value = '';
            trackMessage(messageText);
        }
    }
}

function containsURL(text) {
    const urlPattern = /(https?:\/\/[^\s]+)/g;
    return urlPattern.test(text);
}

function isRepeatedText(text) {
    const repeats = recentMessages.filter(msg => msg === text).length;
    return repeats >= spamThreshold;
}

function trackMessage(text) {
    recentMessages.push(text);
    if (recentMessages.length > spamThreshold) {
        recentMessages.shift(); // Remove oldest message to keep the array within the threshold size
    }
}

function detectSecurityThreat(text) {
    if (threatDetectionModel) {
        const prediction = threatDetectionModel.predict(text);
        return prediction === 1; // 1 indicates a security threat
    }
    return false;
}

async function translateMessage(text, targetLang) {
    const response = await fetch('https://translation.googleapis.com/language/translate/v2', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer YOUR_API_KEY'
        },
        body: JSON.stringify({
            q: text,
            target: targetLang
        })
    });
    
    const result = await response.json();
    return result.data.translations[0].translatedText;
}
const messageInput = document.getElementById('messageInput');
const messagesContainer = document.getElementById('messages');
const recentMessages = [];
const spamThreshold = 3; // Number of allowed repeated messages before considering as spam
let threatDetectionModel;

// Load Machine Learning Model for Threat Detection
async function loadThreatDetectionModel() {
    // Load the pre-trained model (e.g., TensorFlow.js model)
    // Mock function for demonstration purposes
    return {
        predict: (text) => {
            // Simulate a prediction (0 = safe, 1 = threat)
            if (text.toLowerCase().includes('threat')) {
                return 1;
            }
            return 0;
        }
    };
}

// Initialize the model
loadThreatDetectionModel().then((model) => {
    threatDetectionModel = model;
});

function sendMessage() {
    const messageText = messageInput.value.trim();
    if (messageText) {
        if (containsURL(messageText)) {
            alert('Links are not allowed!');
        } else if (isRepeatedText(messageText)) {
            alert('Spam detected! Repeated message.');
        } else if (detectSecurityThreat(messageText)) {
            alert('Security threat detected! Message deleted.');
        } else {
            const messageElement = document.createElement('div');
            messageElement.textContent = messageText;
            messagesContainer.appendChild(messageElement);

            translateMessage(messageText, 'en').then(translatedText => {
                const translatedMessageElement = document.createElement('div');
                translatedMessageElement.textContent = translatedText;
                translatedMessageElement.classList.add('translated-message');
                messagesContainer.appendChild(translatedMessageElement);
            });

            messageInput.value = '';
            trackMessage(messageText);
        }
    }
}

function containsURL(text) {
    const urlPattern = /(https?:\/\/[^\s]+)/g;
    return urlPattern.test(text);
}

function isRepeatedText(text) {
    const repeats = recentMessages.filter(msg => msg === text).length;
    return repeats >= spamThreshold;
}

function trackMessage(text) {
    recentMessages.push(text);
    if (recentMessages.length > spamThreshold) {
        recentMessages.shift(); // Remove oldest message to keep the array within the threshold size
    }
}

function detectSecurityThreat(text) {
    if (threatDetectionModel) {
        const prediction = threatDetectionModel.predict(text);
        return prediction === 1; // 1 indicates a security threat
    }
    return false;
}

async function translateMessage(text, targetLang) {
    const response = await fetch('https://translation.googleapis.com/language/translate/v2', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer YOUR_API_KEY'
        },
        body: JSON.stringify({
            q: text,
            target: targetLang
        })
    });
    
    const result = await response.json();
    return result.data.translations[0].translatedText;
}

// Reel Section
const reelContainer = document.getElementById('reelContainer');
const reel = document.getElementById('reel');
const commentInput = document.getElementById('commentInput');
const commentsContainer = document.getElementById('comments');

function uploadVideo() {
    const videoUpload = document.getElementById('videoUpload');
    const file = videoUpload.files[0];
    if (file) {
        const videoElement = document.createElement('video');
        videoElement.src = URL.createObjectURL(file);
        videoElement.controls = true;
        reel.appendChild(videoElement);
        videoUpload.value = '';
    }
}

function addComment() {
    const commentText = commentInput.value.trim();
    if (commentText) {
        const commentElement = document.createElement('div');
        commentElement.classList.add('comment');
        commentElement.innerHTML = `
            <span>${commentText}</span>
            <div class="reactions">
                <button onclick="likeComment(this)">👍</button>
                <button onclick="dislikeComment(this)">👎</button>
            </div>
        `;
        commentsContainer.appendChild(commentElement);
        commentInput.value = '';
    }
}

function likeComment(button) {
    button.textContent = `👍 ${parseInt(button.textContent.split(' ')[1] || 0) + 1}`;
}

function dislikeComment(button) {
    button.textContent = `👎 ${parseInt(button.textContent.split(' ')[1] || 0) + 1}`;
}

// Custom Scrollbar Color Change
const scrollContainer = document.querySelector('.chat-box');
scrollContainer.addEventListener('scroll', function() {
    const scrollPercent = (scrollContainer.scrollTop / (scrollContainer.scrollHeight - scrollContainer.clientHeight)) * 100;
    const color1 = `hsl(${scrollPercent}, 100%, 50%)`;
    const color2 = `hsl(${(scrollPercent + 50) % 360}, 100%, 50%)`;
    document.documentElement.style.setProperty('--scroll-thumb-color', `linear-gradient(90deg, ${color1}, ${color2})`);
});
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Neumorphism Chatroom with Search</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <!-- Other sections remain the same -->

    <!-- Search Bar -->
    <div class="search-container">
        <input type="text" id="searchInput" placeholder="Search messages...">
        <button onclick="searchMessages()">Search</button>
    </div>
    
    <!-- Chat Box -->
    <div class="chat-box">
        <div class="messages" id="messages"></div>
        <div class="input-container">
            <input type="text" id="messageInput" placeholder="Type a message...">
            <button onclick="sendMessage()">Send</button>
        </div>
    </div>
    <audio id="audio" src="path/to/your/audio/file.mp3"></audio>
    <script src="script.js"></script>
</body>
</html>
body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #e0e5ec;
    margin: 0;
    font-family: Arial, sans-serif;
}

.search-container {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 20px;
}

#searchInput {
    width: 0;
    padding: 10px;
    border: none;
    border-radius: 20px;
    box-shadow: inset 10px 10px 20px #babecc, inset -10px -10px 20px #ffffff;
    background: #e0e5ec;
    outline: none;
    transition: width 0.4s ease-in-out;
}

#searchInput:focus {
    width: 300px;
}

.search-container button {
    margin-left: 10px;
    padding: 10px 20px;
    border: none;
    border-radius: 20px;
    background: #e0e5ec;
    box-shadow: 10px 10px 20px #babecc, -10px -10px 20px #ffffff;
    cursor: pointer;
    transition: background-color 0.3s;
}

.search-container button:hover {
    background-color: #d1d9e6;
}

.chat-box {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    background: #e0e5ec;
    border-radius: 20px;
    box-shadow: 20px 20px 60px #babecc, -20px -20px 60px #ffffff;
    padding: 20px;
    width: 400px;
    height: 600px;
    overflow-y: auto; /* Enable scrolling */
}

.messages {
    flex: 1;
    overflow-y: auto; /* Enable scrolling */
}

/* Custom Scrollbar Styles */
::-webkit-scrollbar {
    width: 10px;
}

::-webkit-scrollbar-track {
    background: #e0e5ec;
    border-radius: 20px;
}

::-webkit-scrollbar-thumb {
    background: linear-gradient(90deg, #ff7b54, #ff7b54, #ffda79);
    border-radius: 20px;
    transition: background-color 0.3s;
}

::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(90deg, #ffda79, #ff7b54, #ff7b54);
    cursor: pointer;
}

.input-container {
    display: flex;
}

input {
    flex: 1;
    padding: 10px;
    border: none;
    border-radius: 20px;
    box-shadow: inset 10px 10px 20px #babecc, inset -10px -10px 20px #ffffff;
    background: #e0e5ec;
    outline: none;
}

button {
    margin-left: 10px;
    padding: 10px 20px;
    border: none;
    border-radius: 20px;
    background: #e0e5ec;
    box-shadow: 10px 10px 20px #babecc, -10px -10px 20px #ffffff;
    cursor: pointer;
}

button:hover {
    box-shadow: inset 10px 10px 20px #babecc, inset -10px -10px 20px #ffffff;
}

/* Custom Scrollbar Animation */
@keyframes scrollbarColorChange {
    0% {
        background: #ff7b54;
    }
    50% {
        background: #ffda79;
    }
    100% {
        background: #ff7b54;
    }
}

::-webkit-scrollbar-thumb {
    animation: scrollbarColorChange 2s infinite;
}
const messageInput = document.getElementById('messageInput');
const messagesContainer = document.getElementById('messages');
const recentMessages = [];
const spamThreshold = 3; // Number of allowed repeated messages before considering as spam
let threatDetectionModel;

// Load Machine Learning Model for Threat Detection
async function loadThreatDetectionModel() {
    // Load the pre-trained model (e.g., TensorFlow.js model)
    // Mock function for demonstration purposes
    return {
        predict: (text) => {
            // Simulate a prediction (0 = safe, 1 = threat)
            if (text.toLowerCase().includes('threat')) {
                return 1;
            }
            return 0;
        }
    };
}

// Initialize the model
loadThreatDetectionModel().then((model) => {
    threatDetectionModel = model;
});

function sendMessage() {
    const messageText = messageInput.value.trim();
    if (messageText) {
        if (containsURL(messageText)) {
            alert('Links are not allowed!');
        } else if (isRepeatedText(messageText)) {
            alert('Spam detected! Repeated message.');
        } else if (detectSecurityThreat(messageText)) {
            alert('Security threat detected! Message deleted.');
        } else {
            const messageElement = document.createElement('div');
            messageElement.textContent = messageText;
            messagesContainer.appendChild(messageElement);

            translateMessage(messageText, 'en').then(translatedText => {
                const translatedMessageElement = document.createElement('div');
                translatedMessageElement.textContent = translatedText;
                translatedMessageElement.classList.add('translated-message');
                messagesContainer.appendChild(translatedMessageElement);
            });

            messageInput.value = '';
            trackMessage(messageText);
        }
    }
}

function containsURL(text) {
    const urlPattern = /(https?:\/\/[^\s]+)/g;
    return urlPattern.test(text);
}

function isRepeatedText(text) {
    const repeats = recentMessages.filter(msg => msg === text).length;
    return repeats >= spamThreshold;
}

function trackMessage(text) {
    recentMessages.push(text);
    if (recentMessages.length > spamThreshold) {
        recentMessages.shift(); // Remove oldest message to keep the array within the threshold size
    }
}

function detectSecurityThreat(text) {
    if (threatDetectionModel) {
        const prediction = threatDetectionModel.predict(text);
        return prediction === 1; // 1 indicates a security threat
    }
    return false;
}

async function translateMessage(text, targetLang) {
    const response = await fetch('https://translation.googleapis.com/language/translate/v2', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer YOUR_API_KEY'
        },
        body: JSON.stringify({
            q: text,
            target: targetLang
        })
    });
    
    const result = await response.json();
    return result.data.translations[0].translatedText;
}

// Search Functionality
function searchMessages() {
    const searchInput = document.getElementById('searchInput').value.toLowerCase();
    const messages = document.querySelectorAll('.messages div');
    messages.forEach(message => {
        if (message.textContent.toLowerCase().includes(searchInput)) {
            message.style.backgroundColor = '#ffff99'; // Highlight the search result
        } else {
            message.style.backgroundColor = '';
        }
    });
}

// Reel Section
const reelContainer = document.getElementById('reelContainer');
const reel = document.getElementById('reel');
const commentInput = document.getElementById('commentInput');
const commentsContainer = document.getElementById('comments');

function uploadVideo() {
    const videoUpload = document.getElementById('videoUpload');
    const file = videoUpload.files[0];
    if (file) {
        const videoElement = document.createElement('video');
        videoElement.src = URL.createObjectURL(file);
        videoElement.controls = true;
        reel.appendChild(videoElement);
        videoUpload.value = '';
    }
}

function addComment() {
    const commentText = commentInput.value.trim();
    if (commentText) {
        const commentElement = document.createElement('div');
        commentElement.classList.add('comment');
        commentElement.innerHTML = `[_{{{CITATION{{{_1{](https://github.com/EleanorEllingson/web-dev/tree/b2f2a382e77a20fd6895677c8b8f402ac4bae352/7-bank-project%2F1-template-route%2Ftranslations%2FREADME.ko.md)